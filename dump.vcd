$date
	Wed May 20 14:50:52 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 ! \registers[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 " \registers[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 # \registers[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 $ \registers[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 % \registers[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 & \registers[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 ' \registers[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 ( \registers[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 ) \data[100] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 * \data[101] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 + \data[102] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 , \data[103] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 - \data[104] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 . \data[105] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 / \data[0] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 0 \data[1] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 1 \data[2] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 2 \data[3] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 3 \data[4] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 4 \data[5] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 5 \data[6] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 6 \data[7] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$var wire 1 7 carry $end
$var wire 1 8 stack_overflow $end
$var wire 1 9 zero $end
$var reg 1 : clk $end
$var reg 1 ; rst $end
$scope module cpu $end
$var wire 3 < acode [2:0] $end
$var wire 1 = alu_src $end
$var wire 1 7 carry $end
$var wire 1 > clk $end
$var wire 19 ? instruction [18:0] $end
$var wire 1 @ is_halt $end
$var wire 1 A is_shift $end
$var wire 1 B mem_or_alu $end
$var wire 1 C mem_read_write $end
$var wire 2 D pc_src [1:0] $end
$var wire 1 E reg2_read_source $end
$var wire 1 F reg_read_write $end
$var wire 1 G rst $end
$var wire 2 H scode [1:0] $end
$var wire 1 8 stack_overflow $end
$var wire 1 I stack_pop $end
$var wire 1 J stack_push $end
$var wire 1 K update_z_c $end
$var wire 1 9 zero $end
$scope module data_path $end
$var wire 3 L acode [2:0] $end
$var wire 8 M alu_A [7:0] $end
$var wire 8 N alu_B [7:0] $end
$var wire 1 O alu_carry_out $end
$var wire 8 P alu_result [7:0] $end
$var wire 1 = alu_src $end
$var wire 12 Q branched_pc [11:0] $end
$var wire 1 > clk $end
$var wire 8 R data_memory_out [7:0] $end
$var wire 2 S forward_A [1:0] $end
$var wire 2 T forward_B [1:0] $end
$var wire 12 U incremented_pc [11:0] $end
$var wire 19 V instruction [18:0] $end
$var wire 1 @ is_halt $end
$var wire 1 A is_shift $end
$var wire 1 B mem_or_alu $end
$var wire 1 C mem_read_write $end
$var wire 2 W pc_src [1:0] $end
$var wire 1 E reg2_read_source $end
$var wire 8 X reg_out_1 [7:0] $end
$var wire 8 Y reg_out_2 [7:0] $end
$var wire 1 F reg_write_signal $end
$var wire 1 G rst $end
$var wire 2 Z scode [1:0] $end
$var wire 12 [ stack_out [11:0] $end
$var wire 1 8 stack_overflow $end
$var wire 1 I stack_pop $end
$var wire 1 J stack_push $end
$var wire 1 K update_z_c $end
$var wire 1 9 zero $end
$var reg 8 \ EX_alu_result [7:0] $end
$var reg 12 ] EX_branched_pc [11:0] $end
$var reg 8 ^ EX_data_2 [7:0] $end
$var reg 19 _ EX_inst [18:0] $end
$var reg 1 ` EX_mem_or_alu $end
$var reg 1 a EX_mem_read_write $end
$var reg 2 b EX_pc_src [1:0] $end
$var reg 1 c EX_reg_write_signal $end
$var reg 3 d ID_acode [2:0] $end
$var reg 1 e ID_alu_src $end
$var reg 8 f ID_data_1 [7:0] $end
$var reg 8 g ID_data_2 [7:0] $end
$var reg 19 h ID_inst [18:0] $end
$var reg 1 i ID_is_shift $end
$var reg 1 j ID_mem_or_alu $end
$var reg 1 k ID_mem_read_write $end
$var reg 12 l ID_pc [11:0] $end
$var reg 2 m ID_pc_src [1:0] $end
$var reg 1 n ID_reg_write_signal $end
$var reg 2 o ID_scode [1:0] $end
$var reg 1 p ID_update_z_c $end
$var reg 19 q IF_inst [18:0] $end
$var reg 12 r IF_pc [11:0] $end
$var reg 8 s MEM_alu_result [7:0] $end
$var reg 19 t MEM_inst [18:0] $end
$var reg 1 u MEM_mem_or_alu $end
$var reg 8 v MEM_read_data [7:0] $end
$var reg 1 w MEM_reg_write_signal $end
$var reg 1 x carry $end
$var reg 12 y pc [11:0] $end
$scope module instruction_memory $end
$var wire 12 z address [11:0] $end
$var wire 1 G rst $end
$var reg 19 { instruction [18:0] $end
$upscope $end
$scope module register_file $end
$var wire 1 > clk $end
$var wire 8 | in_data [7:0] $end
$var wire 3 } reg_read_1 [2:0] $end
$var wire 3 ~ reg_read_2 [2:0] $end
$var wire 3 !" reg_write [2:0] $end
$var wire 1 "" reg_write_signal $end
$var wire 1 G rst $end
$var integer 32 #" i [31:0] $end
$var reg 8 $" out_data_1 [7:0] $end
$var reg 8 %" out_data_2 [7:0] $end
$scope begin loop $end
$upscope $end
$scope begin loop2 $end
$upscope $end
$upscope $end
$scope module forward_selector $end
$var wire 8 &" EX_alu_result [7:0] $end
$var wire 8 '" ID_data_1 [7:0] $end
$var wire 8 (" ID_data_2 [7:0] $end
$var wire 2 )" forward_A [1:0] $end
$var wire 2 *" forward_B [1:0] $end
$var wire 8 +" mem_or_alu_data [7:0] $end
$var reg 8 ," alu_A [7:0] $end
$var reg 8 -" alu_B [7:0] $end
$upscope $end
$scope module alu $end
$var wire 8 ." A [7:0] $end
$var wire 8 /" B [7:0] $end
$var wire 3 0" acode [2:0] $end
$var wire 1 7 carry_in $end
$var wire 1 1" is_shift $end
$var wire 1 G rst $end
$var wire 2 2" scode [1:0] $end
$var wire 1 3" update_z_c $end
$var reg 8 4" R [7:0] $end
$var reg 1 5" carry_out $end
$var reg 8 6" neg_B [7:0] $end
$var reg 9 7" temp [8:0] $end
$var reg 16 8" temp2 [15:0] $end
$var reg 1 9" zero $end
$scope function get_carry_out $end
$var reg 8 :" A [7:0] $end
$var reg 8 ;" B [7:0] $end
$var reg 8 <" C [7:0] $end
$var reg 1 =" get_carry_out $end
$upscope $end
$upscope $end
$scope module data_memory $end
$var wire 8 >" address [7:0] $end
$var wire 1 > clk $end
$var wire 1 ?" read_write $end
$var wire 1 G rst $end
$var wire 8 @" write_data [7:0] $end
$var integer 32 A" i [31:0] $end
$var reg 8 B" read_data [7:0] $end
$scope begin loop $end
$upscope $end
$upscope $end
$scope module stack $end
$var wire 1 > clk $end
$var wire 1 I pop_sig $end
$var wire 12 C" push_data [11:0] $end
$var wire 1 J push_sig $end
$var wire 1 G rst $end
$var integer 32 D" i [31:0] $end
$var reg 1 E" overflow $end
$var reg 12 F" pop_data [11:0] $end
$var reg 4 G" stack_pointer [3:0] $end
$scope begin loop2 $end
$upscope $end
$upscope $end
$scope module forwarding_unit $end
$var wire 19 H" EX_inst [18:0] $end
$var wire 1 I" EX_reg_write_signal $end
$var wire 19 J" ID_inst [18:0] $end
$var wire 19 K" MEM_inst [18:0] $end
$var wire 1 "" MEM_reg_write_signal $end
$var wire 1 E reg2_read_source $end
$var reg 2 L" forward_A [1:0] $end
$var reg 2 M" forward_B [1:0] $end
$upscope $end
$upscope $end
$scope module controller $end
$var wire 1 7 carry $end
$var wire 1 > clk $end
$var wire 19 N" instruction [18:0] $end
$var wire 1 @ is_halt $end
$var wire 1 G rst $end
$var wire 1 9 zero $end
$var reg 3 O" acode [2:0] $end
$var reg 1 P" alu_src $end
$var reg 1 Q" is_shift $end
$var reg 1 R" mem_or_alu $end
$var reg 1 S" mem_read_write $end
$var reg 2 T" pc_src [1:0] $end
$var reg 1 U" reg2_read_source $end
$var reg 1 V" reg_write_signal $end
$var reg 2 W" scode [1:0] $end
$var reg 1 X" stack_pop $end
$var reg 1 Y" stack_push $end
$var reg 1 Z" update_z_c $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1Z"
0Y"
0X"
b0 W"
1V"
0U"
b0 T"
0S"
1R"
0Q"
0P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
0I"
b0 H"
b0 G"
bx F"
0E"
b1000 D"
b1 C"
bx B"
b110 A"
b0 @"
0?"
b0 >"
x="
bx <"
bx ;"
bx :"
09"
bx 8"
b0 7"
b0 6"
05"
b0 4"
03"
b0 2"
01"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b1000 #"
0""
b0 !"
b0 ~
b0 }
b0 |
b100000100000000001 {
b1 z
b1 y
xx
0w
b0 v
0u
b0 t
b0 s
b0 r
b0 q
0p
b0 o
0n
b0 m
b0 l
0k
0j
0i
b0 h
b0 g
b0 f
0e
b0 d
0c
b0 b
0a
0`
b0 _
b0 ^
b0 ]
b0 \
bx [
b0 Z
b0 Y
b0 X
b0 W
b100000100000000001 V
b10 U
b0 T
b0 S
bx R
b0 Q
b0 P
0O
b0 N
b0 M
b0 L
1K
0J
0I
b0 H
xG
1F
0E
b0 D
0C
1B
0A
0@
b0 ?
1>
0=
b0 <
x;
1:
09
08
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
b0 !
$end
#20
bx |
bx +"
1n
1j
1p
13"
bx v
b1000 #"
0:
0>
#21
1P"
1=
1Z"
1K
1V"
1F
1R"
1B
b100000100000000001 q
b100000100000000001 ?
b100000100000000001 N"
b10 r
b11 C"
#40
b11 U
b100001000000000010 {
b100001000000000010 V
1Z"
1K
1V"
1F
1P"
1=
1R"
1B
b10 y
b10 z
0x
07
b1000 #"
1:
1>
#60
b1 4"
b1 P
0="
b1 <"
b1 ;"
b0 :"
b1 7"
b11111111 6"
b1 /"
1`
1c
1I"
b100000100000000001 h
b100000100000000001 J"
b10 l
b11 Q
1e
b1000 #"
0:
0>
#61
1Z"
1K
1V"
1F
1P"
1=
1R"
1B
b100001000000000010 q
b100001000000000010 ?
b100001000000000010 N"
b11 r
b100 C"
#80
b100 U
b1100101000000 {
b1100101000000 V
1Z"
1K
1V"
1F
1P"
1=
1R"
1B
b11 y
b11 z
b1000 #"
1:
1>
#100
b10 4"
b10 P
b10 <"
b10 ;"
b10 7"
b11111110 6"
b10 /"
b0 |
b0 +"
b100001000000000010 h
b100001000000000010 J"
b11 l
b101 Q
b100000100000000001 _
b100000100000000001 H"
b1 \
b1 &"
b1 >"
b11 ]
1u
1w
1""
b1000 #"
0:
0>
#101
1Z"
1K
1V"
1F
0P"
0=
1R"
1B
b0 !
bx %"
bx Y
bx $"
bx X
b10 ~
b1 }
b1100101000000 q
b1100101000000 ?
b1100101000000 N"
b100 r
b101 C"
#120
b101 U
b1111111111111111111 {
b1111111111111111111 V
1Z"
1K
1V"
1F
1R"
1B
b100 y
b100 z
b0 !
b1000 #"
1:
1>
#140
b10 -"
b10 N
09"
09
b11 4"
b11 P
05"
0O
0="
b11 <"
b10 ;"
b1 :"
b11 7"
b11111110 6"
b1 !"
b1 |
b1 +"
b10 L"
b10 S
b10 )"
b1 M"
b1 T
b1 *"
bx ("
b1 ,"
b1 M
b1 ."
b10 /"
b100000100000000001 t
b100000100000000001 K"
b1 s
b100001000000000010 _
b100001000000000010 H"
b10 \
b10 &"
b10 >"
b101 ]
b1100101000000 h
b1100101000000 J"
bx g
bx f
bx '"
b100 l
b1000100 Q
0e
b1000 #"
0:
0>
#141
0Z"
0K
0V"
0F
0R"
0B
b0 !
b111 ~
b111 }
b1111111111111111111 q
b1111111111111111111 ?
b1111111111111111111 N"
b101 r
b110 C"
#160
b110 U
bx {
bx V
b1 "
b101 y
b101 z
b1000 #"
1:
1>
#180
bx 6"
bx /"
bx 4"
bx P
bx 7"
bx -"
bx N
bx ,"
bx M
bx ."
b10 !"
b0 M"
b0 T
b0 *"
b0 L"
b0 S
b0 )"
b10 |
b10 +"
b1111111111111111111 h
b1111111111111111111 J"
b101 l
b100 Q
0n
0j
0p
03"
bx ^
bx @"
b1100101000000 _
b1100101000000 H"
b11 \
b11 &"
b11 >"
b1000100 ]
b100001000000000010 t
b100001000000000010 K"
b10 s
b1000 #"
0:
0>
#181
b0 !
bx ~
bx }
bx q
bx ?
bx N"
b110 r
b111 C"
#200
b111 U
b110 y
b110 z
b10 #
b1000 #"
1:
1>
#220
b11 !"
b11 |
b11 +"
b1100101000000 t
b1100101000000 K"
b11 s
0`
b1111111111111111111 _
b1111111111111111111 H"
0c
0I"
bx \
bx &"
bx >"
b100 ]
bx h
bx J"
b110 l
bx Q
b1000 #"
0:
0>
#221
b111 r
b1000 C"
#240
b1000 U
b11 $
b111 y
b111 z
b1000 #"
1:
1>
#260
b111 !"
bx |
bx +"
b111 l
bx _
bx H"
bx ]
0u
b1111111111111111111 t
1@
b1111111111111111111 K"
0w
0""
bx s
b1000 #"
0:
0>
#261
b1000 r
b1001 C"
#280
b1001 U
b1000 y
b1000 z
b1000 #"
1:
1>
#285
