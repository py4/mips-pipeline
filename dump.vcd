$date
	Mon May 18 11:28:50 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 ! \registers[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 " \registers[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 # \registers[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 $ \registers[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 % \registers[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 & \registers[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 ' \registers[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module register_file $end
$var reg 8 ( \registers[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 ) \data[100] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 * \data[101] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 + \data[102] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 , \data[103] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 - \data[104] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 . \data[105] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 / \data[0] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 0 \data[1] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 1 \data[2] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 2 \data[3] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 3 \data[4] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 4 \data[5] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 5 \data[6] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 12 6 \data[7] [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$var wire 1 7 carry $end
$var wire 1 8 stack_overflow $end
$var wire 1 9 zero $end
$var reg 1 : clk $end
$var reg 1 ; rst $end
$scope module cpu $end
$var wire 3 < acode [2:0] $end
$var wire 1 = alu_src $end
$var wire 1 7 carry $end
$var wire 1 > clk $end
$var wire 19 ? instruction [18:0] $end
$var wire 1 @ is_shift $end
$var wire 1 A mem_or_alu $end
$var wire 1 B mem_read_write $end
$var wire 2 C pc_src [1:0] $end
$var wire 1 D reg2_read_source $end
$var wire 1 E reg_read_write $end
$var wire 1 F rst $end
$var wire 2 G scode [1:0] $end
$var wire 1 8 stack_overflow $end
$var wire 1 H stack_pop $end
$var wire 1 I stack_push $end
$var wire 1 J update_z_c $end
$var wire 1 9 zero $end
$scope module data_path $end
$var wire 3 K acode [2:0] $end
$var wire 1 L alu_carry_out $end
$var wire 8 M alu_result [7:0] $end
$var wire 1 = alu_src $end
$var wire 12 N branched_pc [11:0] $end
$var wire 1 > clk $end
$var wire 8 O data_memory_out [7:0] $end
$var wire 1 P exmem_out_MEM_mem_read_write $end
$var wire 2 Q exmem_out_MEM_pc_src [1:0] $end
$var wire 1 R exmem_out_WB_mem_or_alu $end
$var wire 1 S exmem_out_WB_reg_write_signal $end
$var wire 8 T exmem_out_alu_result [7:0] $end
$var wire 8 U exmem_out_data_2 [7:0] $end
$var wire 12 V exmem_out_new_branch_pc [11:0] $end
$var wire 3 W exmem_out_reg_write [2:0] $end
$var wire 1 X idex_WB_reg_write_signal $end
$var wire 3 Y idex_out_EX_acode [2:0] $end
$var wire 1 Z idex_out_EX_alu_src $end
$var wire 1 [ idex_out_EX_is_shift $end
$var wire 2 \ idex_out_EX_scode [1:0] $end
$var wire 1 ] idex_out_EX_update_z_c $end
$var wire 1 ^ idex_out_MEM_mem_read_write $end
$var wire 2 _ idex_out_MEM_pc_src [1:0] $end
$var wire 1 ` idex_out_MEM_read_write $end
$var wire 1 a idex_out_WB_mem_or_alu $end
$var wire 1 b idex_out_WB_reg_write_signal $end
$var wire 8 c idex_out_data_1 [7:0] $end
$var wire 8 d idex_out_data_2 [7:0] $end
$var wire 3 e idex_out_ins1311 [2:0] $end
$var wire 8 f idex_out_ins70 [7:0] $end
$var wire 12 g idex_out_new_pc [11:0] $end
$var wire 19 h ifid_out_instruction [18:0] $end
$var wire 12 i ifid_out_new_pc [11:0] $end
$var wire 12 j incremented_pc [11:0] $end
$var wire 19 k instruction [18:0] $end
$var wire 1 @ is_shift $end
$var wire 1 A mem_or_alu $end
$var wire 1 B mem_read_write $end
$var wire 1 l memwb_out_WB_mem_or_alu $end
$var wire 1 m memwb_out_WB_reg_write_signal $end
$var wire 8 n memwb_out_alu_result [7:0] $end
$var wire 8 o memwb_out_read_data [7:0] $end
$var wire 3 p memwb_out_reg_write [2:0] $end
$var wire 2 q pc_src [1:0] $end
$var wire 1 D reg2_read_source $end
$var wire 8 r reg_out_1 [7:0] $end
$var wire 8 s reg_out_2 [7:0] $end
$var wire 1 E reg_write_signal $end
$var wire 1 F rst $end
$var wire 2 t scode [1:0] $end
$var wire 12 u stack_out [11:0] $end
$var wire 1 8 stack_overflow $end
$var wire 1 H stack_pop $end
$var wire 1 I stack_push $end
$var wire 1 J update_z_c $end
$var wire 1 9 zero $end
$var reg 1 v carry $end
$var reg 12 w pc [11:0] $end
$scope module ifid $end
$var wire 1 > clk $end
$var wire 19 x in_instruction [18:0] $end
$var wire 12 y in_new_pc [11:0] $end
$var reg 1 z instruction $end
$var reg 1 { new_pc $end
$var reg 19 | out_instruction [18:0] $end
$var reg 12 } out_new_pc [11:0] $end
$upscope $end
$scope module idex $end
$var wire 1 > clk $end
$var wire 3 ~ in_EX_acode [2:0] $end
$var wire 1 = in_EX_alu_src $end
$var wire 1 @ in_EX_is_shift $end
$var wire 2 !" in_EX_scode [1:0] $end
$var wire 1 J in_EX_update_z_c $end
$var wire 1 B in_MEM_mem_read_write $end
$var wire 2 "" in_MEM_pc_src [1:0] $end
$var wire 1 A in_WB_mem_or_alu $end
$var wire 1 E in_WB_reg_write_signal $end
$var wire 8 #" in_data_1 [7:0] $end
$var wire 8 $" in_data_2 [7:0] $end
$var wire 3 %" in_ins1311 [2:0] $end
$var wire 8 &" in_ins70 [7:0] $end
$var wire 12 '" in_new_pc [11:0] $end
$var reg 3 (" EX_acode [2:0] $end
$var reg 1 )" EX_alu_src $end
$var reg 1 *" EX_is_shift $end
$var reg 2 +" EX_scode [1:0] $end
$var reg 1 ," EX_update_z_c $end
$var reg 1 -" MEM_mem_read_write $end
$var reg 2 ." MEM_pc_src [1:0] $end
$var reg 1 /" WB_mem_or_alu $end
$var reg 1 0" WB_reg_write_signal $end
$var reg 8 1" data_1 [7:0] $end
$var reg 8 2" data_2 [7:0] $end
$var reg 3 3" ins1311 [2:0] $end
$var reg 8 4" ins70 [7:0] $end
$var reg 1 5" new_pc $end
$var reg 3 6" out_EX_acode [2:0] $end
$var reg 1 7" out_EX_alu_src $end
$var reg 1 8" out_EX_is_shift $end
$var reg 2 9" out_EX_scode [1:0] $end
$var reg 1 :" out_EX_update_z_c $end
$var reg 1 ;" out_MEM_mem_read_write $end
$var reg 2 <" out_MEM_pc_src [1:0] $end
$var reg 1 =" out_WB_mem_or_alu $end
$var reg 1 >" out_WB_reg_write_signal $end
$var reg 8 ?" out_data_1 [7:0] $end
$var reg 8 @" out_data_2 [7:0] $end
$var reg 3 A" out_ins1311 [2:0] $end
$var reg 8 B" out_ins70 [7:0] $end
$var reg 12 C" out_new_pc [11:0] $end
$upscope $end
$scope module exmem $end
$var wire 1 > clk $end
$var wire 1 ` in_MEM_mem_read_write $end
$var wire 2 D" in_MEM_pc_src [1:0] $end
$var wire 1 a in_WB_mem_or_alu $end
$var wire 1 X in_WB_reg_write_signal $end
$var wire 8 E" in_alu_result [7:0] $end
$var wire 8 F" in_data_2 [7:0] $end
$var wire 12 G" in_new_branch_pc [11:0] $end
$var wire 3 H" in_reg_write [2:0] $end
$var reg 1 I" MEM_mem_read_write $end
$var reg 2 J" MEM_pc_src [1:0] $end
$var reg 1 K" WB_mem_or_alu $end
$var reg 1 L" WB_reg_write_signal $end
$var reg 8 M" alu_result [7:0] $end
$var reg 8 N" data_2 [7:0] $end
$var reg 12 O" new_branch_pc [11:0] $end
$var reg 1 P" out_MEM_mem_read_write $end
$var reg 2 Q" out_MEM_pc_src [1:0] $end
$var reg 1 R" out_WB_mem_or_alu $end
$var reg 1 S" out_WB_reg_write_signal $end
$var reg 8 T" out_alu_result [7:0] $end
$var reg 8 U" out_data_2 [7:0] $end
$var reg 12 V" out_new_branch_pc [11:0] $end
$var reg 3 W" out_reg_write [2:0] $end
$var reg 3 X" reg_write [2:0] $end
$upscope $end
$scope module memwb $end
$var wire 1 > clk $end
$var wire 1 R in_WB_mem_or_alu $end
$var wire 1 S in_WB_reg_write_signal $end
$var wire 8 Y" in_alu_result [7:0] $end
$var wire 8 Z" in_read_data [7:0] $end
$var wire 3 [" in_reg_write [2:0] $end
$var reg 1 \" WB_mem_or_alu $end
$var reg 1 ]" WB_reg_write_signal $end
$var reg 8 ^" alu_result [7:0] $end
$var reg 1 _" out_WB_mem_or_alu $end
$var reg 1 `" out_WB_reg_write_signal $end
$var reg 8 a" out_alu_result [7:0] $end
$var reg 8 b" out_read_data [7:0] $end
$var reg 3 c" out_reg_write [2:0] $end
$var reg 8 d" read_data [7:0] $end
$var reg 3 e" reg_write [2:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 12 f" address [11:0] $end
$var wire 1 F rst $end
$var reg 19 g" instruction [18:0] $end
$upscope $end
$scope module register_file $end
$var wire 1 > clk $end
$var wire 8 h" in_data [7:0] $end
$var wire 3 i" reg_read_1 [2:0] $end
$var wire 3 j" reg_read_2 [2:0] $end
$var wire 3 k" reg_write [2:0] $end
$var wire 1 S reg_write_signal $end
$var wire 1 F rst $end
$var integer 32 l" i [31:0] $end
$var reg 8 m" out_data_1 [7:0] $end
$var reg 8 n" out_data_2 [7:0] $end
$scope begin loop $end
$upscope $end
$scope begin loop2 $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 8 o" A [7:0] $end
$var wire 8 p" B [7:0] $end
$var wire 3 q" acode [2:0] $end
$var wire 1 7 carry_in $end
$var wire 1 [ is_shift $end
$var wire 1 F rst $end
$var wire 2 r" scode [1:0] $end
$var wire 1 ] update_z_c $end
$var reg 8 s" R [7:0] $end
$var reg 1 t" carry_out $end
$var reg 8 u" neg_B [7:0] $end
$var reg 9 v" temp [8:0] $end
$var reg 16 w" temp2 [15:0] $end
$var reg 1 x" zero $end
$scope function get_carry_out $end
$var reg 8 y" A [7:0] $end
$var reg 8 z" B [7:0] $end
$var reg 8 {" C [7:0] $end
$var reg 1 |" get_carry_out $end
$upscope $end
$upscope $end
$scope module data_memory $end
$var wire 8 }" address [7:0] $end
$var wire 1 > clk $end
$var wire 1 P read_write $end
$var wire 1 F rst $end
$var wire 8 ~" write_data [7:0] $end
$var integer 32 !# i [31:0] $end
$var reg 8 "# read_data [7:0] $end
$scope begin loop $end
$upscope $end
$upscope $end
$scope module stack $end
$var wire 1 > clk $end
$var wire 1 H pop_sig $end
$var wire 12 ## push_data [11:0] $end
$var wire 1 I push_sig $end
$var wire 1 F rst $end
$var integer 32 $# i [31:0] $end
$var reg 1 %# overflow $end
$var reg 12 &# pop_data [11:0] $end
$var reg 4 '# stack_pointer [3:0] $end
$scope begin loop2 $end
$upscope $end
$upscope $end
$upscope $end
$scope module controller $end
$var wire 1 7 carry $end
$var wire 1 > clk $end
$var wire 19 (# instruction [18:0] $end
$var wire 1 F rst $end
$var wire 1 9 zero $end
$var reg 3 )# acode [2:0] $end
$var reg 1 *# alu_src $end
$var reg 1 +# is_shift $end
$var reg 1 ,# mem_or_alu $end
$var reg 1 -# mem_read_write $end
$var reg 2 .# pc_src [1:0] $end
$var reg 1 /# reg2_read_source $end
$var reg 1 0# reg_write_signal $end
$var reg 2 1# scode [1:0] $end
$var reg 1 2# stack_pop $end
$var reg 1 3# stack_push $end
$var reg 1 4# update_z_c $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
14#
03#
02#
b0 1#
10#
0/#
b0 .#
0-#
1,#
0+#
1*#
b0 )#
b100000100000000010 (#
b0 '#
bx &#
0%#
b1000 $#
b1 ##
bx "#
b110 !#
bx ~"
bx }"
x|"
bx {"
bx z"
bx y"
0x"
bx w"
bx v"
bx u"
0t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
b1000 l"
bx k"
bx j"
bx i"
bx h"
b100000100000000010 g"
b0 f"
bx e"
bx d"
bx c"
bx b"
bx a"
x`"
x_"
bx ^"
x]"
x\"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
xS"
xR"
bx Q"
xP"
bx O"
bx N"
bx M"
xL"
xK"
b0 J"
xI"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
x>"
x="
bx <"
x;"
x:"
bx 9"
x8"
x7"
bx 6"
x5"
bx 4"
bx 3"
bx 2"
bx 1"
x0"
x/"
bx ."
x-"
x,"
bx +"
x*"
x)"
bx ("
bx '"
b10 &"
b1 %"
bx $"
bx #"
b0 ""
b0 !"
b0 ~
bx }
bx |
x{
xz
b1 y
b100000100000000010 x
b0 w
xv
bx u
b0 t
bx s
bx r
b0 q
bx p
bx o
bx n
xm
xl
b100000100000000010 k
b1 j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
xb
xa
z`
bx _
x^
x]
bx \
x[
xZ
bx Y
zX
bx W
bx V
bx U
bx T
xS
xR
bx Q
xP
bx O
bx N
bx M
0L
b0 K
1J
0I
0H
b0 G
xF
1E
0D
b0 C
0B
1A
0@
b100000100000000010 ?
0>
1=
b0 <
x;
0:
09
08
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
b0 !
$end
#20
14#
1J
10#
1E
1*#
1=
1,#
1A
0v
07
b0 n"
b0 s
b0 $"
b0 j"
b0 !
b0 m"
b0 r
b0 #"
b0 i"
0z
1{
b0x |
b0x h
b0x }
b0x i
b0x '"
10"
1/"
b0 ."
0-"
b0 ("
b0 +"
1,"
1)"
0*"
b1 3"
b10 4"
b0x C"
b0x g
zL"
bx J"
zI"
b0 Q"
b0 Q
b1000 l"
1:
1>
#40
b1000 l"
0:
0>
#60
14#
1J
10#
1E
1*#
1=
1,#
1A
xx"
x9
xt"
xL
b10 z"
b11111110 u"
b10 p"
z]"
1K"
b0 J"
zS"
zS
bx Q"
bx Q
zP"
zP
b1 X"
1>"
1b
1="
1a
b0 <"
b0 _
b0 D"
0;"
0^
b0 6"
b0 Y
b0 q"
b0 9"
b0 \
b0 r"
1:"
1]
17"
1Z
08"
0[
b0 2"
b0 1"
15"
b1 A"
b1 e
b1 H"
b10 B"
b10 f
b0 |
b0 h
b1 }
b1 i
b1 '"
b1000 l"
1:
1>
#80
b1000 l"
0:
0>
#100
14#
1J
10#
1E
1*#
1=
1,#
1A
xv
x7
0x"
09
b10 s"
b10 M
b10 E"
0t"
0L
0|"
b10 {"
b0 y"
b10 v"
b0 @"
b0 d
b0 F"
b0 ?"
b0 c
b0 o"
b1 C"
b11 N
b11 G"
b1 g
1R"
1R
b0 Q"
b0 Q
b1 W"
b1 W
b1 ["
z`"
zm
b1000 l"
1:
1>
#120
b1000 l"
0:
0>
#140
b111 %"
b11111111 &"
b10 j
b10 y
b1111111111111111111 g"
b1111111111111111111 ?
b1111111111111111111 k
b1111111111111111111 x
b1111111111111111111 (#
04#
0J
00#
0E
0*#
0=
0,#
0A
b1 w
b10 ##
b1 f"
0v
07
1\"
b1 e"
b0 N"
b10 M"
b11 O"
b1000 l"
1:
1>
#145
